{"version":3,"sources":["redux/counter.reducer.js","redux/root-reducer.js","redux/counter.sagas.js","redux/root-saga.js","redux/store.js","components/Counter.jsx","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","value","counterReducer","state","action","type","rootReducer","combineReducers","counter","onIncrement","incrementSaga","incrementSagaTakeEvery","console","log","delay","put","takeLatest","takeEvery","rootSaga","all","call","sagaMiddleware","createSagaMiddleware","middlewares","logger","store","createStore","applyMiddleware","run","connect","dispatch","increment","incrementEvery","decrement","onClick","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sSAAMA,EAAgB,CAClBC,MAAO,GAoBIC,EAjBQ,WAAoC,IAAnCC,EAAkC,uDAA1BH,EAAeI,EAAW,uCACtD,OAAOA,EAAOC,MACV,IAAK,YACD,OAAO,2BACAF,GADP,IAEIF,MAAOE,EAAMF,MAAQ,IAE7B,IAAK,YACD,OAAO,2BACAE,GADP,IAEIF,MAAOE,EAAMF,MAAQ,IAE7B,QACA,OAAOE,ICbAG,EAFKC,YAAgB,CAAEC,QAASN,I,kCCA9BO,G,WAMAC,G,WAIAC,GAVV,SAAUF,IAAV,iEACH,OADG,SACGG,QAAQC,IAAI,kBADf,OAEH,OAFG,SAEGC,YAAM,KAFT,OAGH,OAHG,SAGGC,YAAK,CAAEV,KAAM,cAHhB,uCAMA,SAAUK,IAAV,iEACH,OADG,SACGM,YAAW,iBAAkBP,GADhC,uCAIA,SAAUE,IAAV,iEACH,OADG,SACGM,YAAU,uBAAwBR,GADrC,uC,eCTkBS,GAAV,SAAUA,IAAV,iEACX,OADW,SACLC,YAAI,CAACC,YAAMV,GAAgBU,YAAKT,KAD3B,uCCIf,IAAMU,EAAiBC,cACjBC,EAAc,CAACC,IAAQH,GAEhBI,EAAQC,YAAYpB,EAAaqB,IAAe,WAAf,EAAmBJ,IACjEF,EAAeO,IAAIV,G,MACJO,ICaAI,eAVS,SAAA1B,GAAK,MAAK,CAChCF,MAAOE,EAAMK,QAAQP,UAGI,SAAA6B,GAAQ,MAAK,CACtCC,UAAW,kBAAMD,EAAS,CAAEzB,KAAM,oBAClC2B,eAAgB,kBAAMF,EAAS,CAAEzB,KAAM,0BACvC4B,UAAW,kBAAMH,EAAS,CAAEzB,KAAM,kBAGrBwB,EAtBC,SAAC,GAAD,IAAGE,EAAH,EAAGA,UAAWE,EAAd,EAAcA,UAAWD,EAAzB,EAAyBA,eAAgB/B,EAAzC,EAAyCA,MAAzC,OACd,6BACE,yDAEA,2BAAIA,GACJ,4BAAQiC,QAASH,GAAjB,oBACA,4BAAQG,QAASD,GAAjB,aALF,IAKiD,6BAE/C,4BAAQC,QAASF,GAAjB,uB,MCCWG,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,CAAUlB,MAAOA,GACf,kBAAC,EAAD,OAEFmB,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.2f3765f7.chunk.js","sourcesContent":["const INITIAL_STATE = {\n    value: 0\n};\n\nconst counterReducer = (state = INITIAL_STATE, action) => {\n    switch(action.type) {\n        case 'INCREMENT':\n            return {\n                ...state,\n                value: state.value + 1\n            };\n        case 'DECREMENT':\n            return {\n                ...state,\n                value: state.value - 1\n            };\n        default: \n        return state;\n    }\n};\n\nexport default counterReducer;","import { combineReducers } from 'redux';\nimport counterReducer from './counter.reducer';\nconst rootReducer = combineReducers({ counter: counterReducer});\n\nexport default rootReducer;","import { takeEvery, takeLatest, delay, put } from 'redux-saga/effects';\n\nexport function* onIncrement() {\n    yield console.log('Incremented...');\n    yield delay(1000);\n    yield put ({ type: 'INCREMENT'});\n}\n\nexport function* incrementSaga() {\n    yield takeLatest('INCREMENT_SAGA', onIncrement);\n}\n\nexport function* incrementSagaTakeEvery() {\n    yield takeEvery('INCREMENT_SAGA_EVERY', onIncrement);\n}","import { all, call } from 'redux-saga/effects';\nimport { incrementSaga, incrementSagaTakeEvery } from './counter.sagas';\n\nexport default function* rootSaga() {\n    yield all([call (incrementSaga), call(incrementSagaTakeEvery)])\n}","import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './root-reducer';\n//import { incrementSaga } from './counter.sagas';\nimport rootSaga from './root-saga';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [logger, sagaMiddleware];\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\nsagaMiddleware.run(rootSaga);\nexport default store;","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst Counter = ({ increment, decrement, incrementEvery, value }) => (\n  <div>\n    <p>Spam that increment button</p>\n\n    <p>{value}</p>\n    <button onClick={increment}>INCREMENT LATEST</button>\n    <button onClick={decrement}>DECREMENT</button> <br />\n\n    <button onClick={incrementEvery}>INCREMENT EVERY</button>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  value: state.counter.value\n});\n\nconst mapDispatchToProps = dispatch => ({\n  increment: () => dispatch({ type: 'INCREMENT_SAGA' }),\n  incrementEvery: () => dispatch({ type: 'INCREMENT_SAGA_EVERY' }),\n  decrement: () => dispatch({ type: 'DECREMENT' })\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Counter);","import React from 'react';\nimport Counter from './components/Counter';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}