{"version":3,"sources":["redux/counter/counter.reducer.js","redux/users/user.reducer.js","redux/root-reducer.js","redux/counter/counter.sagas.js","redux/users/user.actions.js","redux/users/user.sagas.js","redux/root-saga.js","redux/store.js","components/SagaComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","value","counterReducer","state","action","type","isLoading","list","userReducer","payload","rootReducer","combineReducers","counter","users","onIncrement","incrementSaga","incrementSagaTakeEvery","console","log","delay","put","takeLatest","takeEvery","fetchUsers","fetchUsersSaga","fetch","then","res","json","usersJson","rootSaga","all","call","sagaMiddleware","createSagaMiddleware","middlewares","logger","store","createStore","applyMiddleware","run","connect","dispatch","increment","incrementEvery","decrement","clearUsers","Button","onClick","disabled","Spinner","animation","size","style","display","margin","className","length","fontWeight","map","u","key","id","name","country","slams","createServer","get","timing","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uSAAMA,EAAgB,CAClBC,MAAO,GAoBIC,EAjBQ,WAAoC,IAAnCC,EAAkC,uDAA1BH,EAAeI,EAAW,uCACtD,OAAOA,EAAOC,MACV,IAAK,YACD,OAAO,2BACAF,GADP,IAEIF,MAAOE,EAAMF,MAAQ,IAE7B,IAAK,YACD,OAAO,2BACAE,GADP,IAEIF,MAAOE,EAAMF,MAAQ,IAE7B,QACA,OAAOE,ICjBTH,EAAgB,CAClBM,WAAW,EACXC,KAAM,IA8BKC,EA3BK,WAAoC,IAAnCL,EAAkC,uDAA1BH,EAAeI,EAAW,uCACnD,OAAQA,EAAOC,MACX,IAAK,gBACD,OAAO,2BACAF,GADP,IAEIG,WAAW,IAEnB,IAAK,gBACD,OAAO,2BACAH,GADP,IAEIG,WAAW,EACXC,KAAMH,EAAOK,UAGrB,IAAK,cACD,OAAO,2BACAN,GADP,IAEIG,WAAW,EACXC,KAAM,KAEd,QACI,OAAOJ,ICrBJO,EAFKC,YAAgB,CAAEC,QAASV,EAAgBW,MAAOL,I,kCCDrDM,G,WAMAC,G,WAIAC,GAVV,SAAUF,IAAV,iEACH,OADG,SACGG,QAAQC,IAAI,kBADf,OAEH,OAFG,SAEGC,YAAM,KAFT,OAGH,OAHG,SAGGC,YAAK,CAAEf,KAAM,cAHhB,uCAMA,SAAUU,IAAV,iEACH,OADG,SACGM,YAAW,iBAAkBP,GADhC,uCAIA,SAAUE,IAAV,iEACH,OADG,SACGM,YAAU,uBAAwBR,GADrC,uCCZA,I,WCIGS,G,WAcOC,GAdjB,SAAUD,IAAV,uEAEI,OAFJ,SAEUH,YAAK,CAAEf,KAAM,gBAFvB,OAGI,OAHJ,SAGUY,QAAQC,IAAI,yBAHtB,OAII,OAJJ,SAIUE,YDRwB,CAC9Bf,KAAM,kBCGV,OAKI,OALJ,SAKUoB,MAAM,cACPC,MAAK,SAACC,GAAD,OAAQA,EAAIC,UACjBF,MAAK,SAACE,GACHC,EAAYD,EAAKf,SAR7B,OAWI,OAXJ,UAWUO,YDX4B,CAClCf,KAAM,gBACNI,QCSwBoB,IAX5B,wCAcO,SAAUL,IAAV,iEACH,OADG,SACGH,YAAW,mBAAoBE,GADlC,uC,eCdkBO,GAAV,SAAUA,IAAV,iEACX,OADW,SACLC,YAAI,CAACC,YAAMjB,GAAgBiB,YAAKhB,GAAyBgB,YAAKR,KADzD,uCCGf,IAAMS,EAAiBC,cACjBC,EAAc,CAACC,IAAQH,GAEhBI,EAAQC,YAAY5B,EAAa6B,IAAe,WAAf,EAAmBJ,IACjEF,EAAeO,IAAIV,G,MACJO,I,gBC4CAI,eAdS,SAAAtC,GAAK,MAAK,CAChCF,MAAOE,EAAMS,QAAQX,MACrBY,MAAOV,EAAMU,MAAMN,KACnBD,UAAWH,EAAMU,MAAMP,cAGE,SAAAoC,GAAQ,MAAK,CACtCC,UAAW,kBAAMD,EAAS,CAAErC,KAAM,oBAClCuC,eAAgB,kBAAMF,EAAS,CAAErC,KAAM,0BACvCwC,UAAW,kBAAMH,EAAS,CAAErC,KAAM,eAClCkB,WAAY,kBAAMmB,EAAS,CAAErC,KAAM,sBACnCyC,WAAY,kBAAMJ,EAAS,CAAErC,KAAM,oBAGtBoC,EApDO,SAAC,GAAD,IAAGE,EAAH,EAAGA,UAAWE,EAAd,EAAcA,UAAWD,EAAzB,EAAyBA,eAAgB3C,EAAzC,EAAyCA,MAAOsB,EAAhD,EAAgDA,WAAYuB,EAA5D,EAA4DA,WAAYjC,EAAxE,EAAwEA,MAAOP,EAA/E,EAA+EA,UAA/E,OACpB,6BACE,0DAEA,2BAAIL,GACJ,2BACA,kBAAC8C,EAAA,EAAD,CAAQC,QAASL,GAAjB,0BADA,OAEA,kBAACI,EAAA,EAAD,CAAQC,QAASH,GAAjB,cAGA,2BACA,kBAACE,EAAA,EAAD,CAAQC,QAASJ,GAAjB,0BAEA,6BACA,wCACA,2BACA,kBAACG,EAAA,EAAD,CAAQC,QAASzB,EAAY0B,SAAU3C,GAAvC,eADA,OAEA,kBAACyC,EAAA,EAAD,CAAQC,QAASF,GAAjB,UAEA,kBAACI,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,KAAKC,MAAO,CAAEC,QAAShD,EAAY,QAAS,OAAQiD,OAAQ,UAC7F,yBAAKC,UAAU,YAAYH,MAAQ,CAACC,QAASzC,EAAM4C,OAAS,EAAI,QAAU,SACxE,yBAAKD,UAAU,MAAMH,MAAO,CAACK,WAAY,SACvC,yBAAKF,UAAU,UAAf,QACA,yBAAKA,UAAU,UAAf,WACA,yBAAKA,UAAU,UAAf,UAED3C,EAAM8C,KAAI,SAAAC,GAAC,OAEZ,yBAAKJ,UAAU,MAAMK,IAAKD,EAAEE,IAC1B,yBAAKN,UAAU,UAAUI,EAAEG,MAC3B,yBAAKP,UAAU,UAAUI,EAAEI,SAC3B,yBAAKR,UAAU,UAAUI,EAAEK,gB,sBC7BtBC,cACNC,IAAI,aAAc,CAAEtD,MAAO,CAChC,CAAEiD,GAAI,EAAGC,KAAM,gBAAcC,QAAS,SAAUC,MAAO,IACvD,CAAEH,GAAI,EAAGC,KAAM,eAAgBC,QAAS,MAAOC,MAAO,IACtD,CAAEH,GAAI,EAAGC,KAAM,gBAAiBC,QAAS,cAAeC,MAAO,IAC/D,CAAEH,GAAI,EAAGC,KAAM,eAAgBC,QAAS,QAASC,MAAO,IACxD,CAAEH,GAAI,EAAGC,KAAM,cAAeC,QAAS,UAAWC,MAAO,IACzD,CAAEH,GAAI,EAAGC,KAAM,kBAAmBC,QAAS,MAAOC,MAAO,MACtD,CAAEG,OAAQ,MAWAC,MARf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,QCRcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,CAAUvC,MAAOA,GACf,kBAAC,EAAD,OAEFwC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpE,QAAQoE,MAAMA,EAAMC,c","file":"static/js/main.908d5ce0.chunk.js","sourcesContent":["const INITIAL_STATE = {\n    value: 0\n};\n\nconst counterReducer = (state = INITIAL_STATE, action) => {\n    switch(action.type) {\n        case 'INCREMENT':\n            return {\n                ...state,\n                value: state.value + 1\n            };\n        case 'DECREMENT':\n            return {\n                ...state,\n                value: state.value - 1\n            };\n        default: \n        return state;\n    }\n};\n\nexport default counterReducer;","const INITIAL_STATE = {\n    isLoading: false,\n    list: []\n}\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case 'REQUEST_USERS':\n            return {\n                ...state,\n                isLoading: true,\n            }\n        case 'RECEIVE_USERS':\n            return {\n                ...state,\n                isLoading: false,\n                list: action.payload\n            }\n\n        case 'CLEAR_USERS':\n            return {\n                ...state,\n                isLoading: false,\n                list: []\n            }\n        default:\n            return state;\n\n    }\n\n}\n\nexport default userReducer;","import { combineReducers } from 'redux';\nimport counterReducer from './counter/counter.reducer';\nimport userReducer from './users/user.reducer';\nconst rootReducer = combineReducers({ counter: counterReducer, users: userReducer});\n\nexport default rootReducer;","import { takeEvery, takeLatest, delay, put } from 'redux-saga/effects';\n\nexport function* onIncrement() {\n    yield console.log('Incremented...');\n    yield delay(1000);\n    yield put ({ type: 'INCREMENT'});\n}\n\nexport function* incrementSaga() {\n    yield takeLatest('INCREMENT_SAGA', onIncrement);\n}\n\nexport function* incrementSagaTakeEvery() {\n    yield takeEvery('INCREMENT_SAGA_EVERY', onIncrement);\n}","export const requestUsers =() => ({\n    type: 'REQUEST_USERS'\n});\n\nexport const receiveUsers=(users) => ({\n    type: 'RECEIVE_USERS',\n    payload: users\n});","import { takeLatest, put } from 'redux-saga/effects';\nimport { requestUsers, receiveUsers } from './user.actions';\n\n\nfunction* fetchUsers() {\n    var usersJson;\n    yield put ({ type: 'CLEAR_USERS'});\n    yield console.log('requesting /api/users');\n    yield put (requestUsers());\n    yield fetch(\"/api/users\")\n        .then((res)=> res.json())\n        .then((json) => {\n            usersJson = json.users;\n        });\n\n    yield put (receiveUsers(usersJson));\n}\n\nexport function* fetchUsersSaga() {\n    yield takeLatest('FETCH_USERS_SAGA', fetchUsers);\n}","import { all, call } from 'redux-saga/effects';\nimport { incrementSaga, incrementSagaTakeEvery } from './counter/counter.sagas';\nimport { fetchUsersSaga } from './users/user.sagas';\n\nexport default function* rootSaga() {\n    yield all([call (incrementSaga), call(incrementSagaTakeEvery), call(fetchUsersSaga)])\n}","import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './root-reducer';\n//import { incrementSaga } from './counter.sagas';\nimport rootSaga from './root-saga';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [logger, sagaMiddleware];\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\nsagaMiddleware.run(rootSaga);\nexport default store;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Spinner } from 'react-bootstrap';\n\nconst SagaComponent = ({ increment, decrement, incrementEvery, value, fetchUsers, clearUsers, users, isLoading }) => (\n  <div>\n    <h3>Spam that increment button</h3>\n\n    <p>{value}</p>\n    <p>\n    <Button onClick={increment}>Increment (takeLatest)</Button>&nbsp;\n    <Button onClick={decrement}>Decrement</Button> \n    </p>\n\n    <p>\n    <Button onClick={incrementEvery}>Increment (takeEvery)</Button>\n    </p>\n    <hr/>\n    <h3>API Test</h3>\n    <p>\n    <Button onClick={fetchUsers} disabled={isLoading}>Fetch Users</Button>&nbsp;\n    <Button onClick={clearUsers}>Clear</Button>\n    </p>\n    <Spinner animation=\"border\" size=\"sm\" style={{ display: isLoading ? 'block': 'none', margin: 'auto'}} />\n    <div className=\"container\" style={ {display: users.length > 0 ? 'block' : 'none' }}>\n      <div className=\"row\" style={{fontWeight: 'bold'}}>\n        <div className=\"col-sm\">Name</div>\n        <div className=\"col-sm\">Country</div>\n        <div className=\"col-sm\">Slams</div>\n      </div>\n      {users.map(u => \n\n      <div className=\"row\" key={u.id}>\n        <div className=\"col-sm\">{u.name}</div>\n        <div className=\"col-sm\">{u.country}</div>\n        <div className=\"col-sm\">{u.slams}</div>\n      </div>)\n      }\n      </div>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  value: state.counter.value,\n  users: state.users.list,\n  isLoading: state.users.isLoading\n});\n\nconst mapDispatchToProps = dispatch => ({\n  increment: () => dispatch({ type: 'INCREMENT_SAGA' }),\n  incrementEvery: () => dispatch({ type: 'INCREMENT_SAGA_EVERY' }),\n  decrement: () => dispatch({ type: 'DECREMENT' }),\n  fetchUsers: () => dispatch({ type: 'FETCH_USERS_SAGA'}),\n  clearUsers: () => dispatch({ type: 'CLEAR_USERS'})\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SagaComponent);","import React from 'react';\nimport SagaComponent from './components/SagaComponent';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { createServer } from \"miragejs\"\n\nlet server = createServer()\nserver.get(\"/api/users\", { users: [\n  { id: 1, name: \"Björn Borg\", country: \"Sweden\", slams: 11 },\n  { id: 2, name: \"Pete Sampras\", country: \"USA\", slams: 14},\n  { id: 3, name: \"Roger Federer\", country: \"Switzerland\", slams: 20},\n  { id: 4, name: \"Rafael Nadal\", country: \"Spain\", slams: 20},\n  { id: 5, name: \"Steffi Graf\", country: \"Germany\", slams: 22},\n  { id: 6, name: \"Serena Williams\", country: \"USA\", slams: 23}\n] }, { timing: 3000 })\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SagaComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}